[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/hw0/index.html",
    "href": "posts/hw0/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\n# In[6]:\n\n\n#penguins.head\n\n\n# In[8]:\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming penguins dataset is already loaded as shown in your output\n# penguins = sns.load_dataset(\"penguins\")\n\n# Construct a pairplot\nsns.pairplot(penguins, hue=\"studyName\", palette=\"Set2\", diag_kind=\"kde\", markers=[\"o\", \"s\", \"D\"])\n\n# Enhance the plot\nplt.suptitle(\"Pairplot of Palmer Penguins Dataset\", size=16)\nplt.subplots_adjust(top=0.9)  # Adjust title position\n\nplt.show()\n\n/Users/owensun/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning:\n\nThe figure layout has changed to tight"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\nTesttest\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html#introduction",
    "href": "posts/post-with-code/index.html#introduction",
    "title": "Hw0",
    "section": "Introduction",
    "text": "Introduction\nIn this tutorial, we will explore the Palmer Penguins dataset, a well-known dataset in the data science community, often used for data exploration and visualization. We’ll create a pairplot to visualize the relationships between different variables in the dataset."
  },
  {
    "objectID": "posts/post-with-code/index.html#prerequisites",
    "href": "posts/post-with-code/index.html#prerequisites",
    "title": "Hw0",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nPython installed on your machine.\nBasic understanding of Python programming.\nFamiliarity with pandas, seaborn, and matplotlib libraries."
  },
  {
    "objectID": "posts/post-with-code/index.html#step-1-loading-the-dataset",
    "href": "posts/post-with-code/index.html#step-1-loading-the-dataset",
    "title": "Hw0",
    "section": "Step 1: Loading the Dataset",
    "text": "Step 1: Loading the Dataset\nFirst, we need to load the dataset. We will use pandas, a powerful Python library for data manipulation, to load the dataset from a URL.\n\nimport pandas as pd\n\n# URL of the Palmer Penguins dataset\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\n\n# Load the dataset\npenguins = pd.read_csv(url)"
  },
  {
    "objectID": "posts/post-with-code/index.html#step-2-previewing-the-dataset",
    "href": "posts/post-with-code/index.html#step-2-previewing-the-dataset",
    "title": "Hw0",
    "section": "Step 2: Previewing the Dataset",
    "text": "Step 2: Previewing the Dataset\nIt’s always a good practice to preview the data before proceeding with any analysis. This helps to understand the structure of the data.\n\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\nThe head() function displays the first five rows of the dataset by default, providing a glimpse into the data we are working with."
  },
  {
    "objectID": "posts/post-with-code/index.html#step-3-importing-visualization-libraries",
    "href": "posts/post-with-code/index.html#step-3-importing-visualization-libraries",
    "title": "Hw0",
    "section": "Step 3: Importing Visualization Libraries",
    "text": "Step 3: Importing Visualization Libraries\nWe will use seaborn and matplotlib for visualization. Seaborn is a Python data visualization library based on matplotlib that provides a high-level interface for drawing attractive and informative statistical graphics.\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/post-with-code/index.html#step-4-constructing-a-pairplot",
    "href": "posts/post-with-code/index.html#step-4-constructing-a-pairplot",
    "title": "Hw0",
    "section": "Step 4: Constructing a Pairplot",
    "text": "Step 4: Constructing a Pairplot\nA pairplot allows us to see both distribution of single variables and relationships between two variables. We will create a pairplot using seaborn.\n\n# Construct a pairplot\nsns.pairplot(penguins, hue=\"studyName\", palette=\"Set2\", diag_kind=\"kde\", markers=[\"o\", \"s\", \"D\"])\n\n/Users/owensun/anaconda3/lib/python3.11/site-packages/seaborn/axisgrid.py:118: UserWarning:\n\nThe figure layout has changed to tight\n\n\n\n\n\n\n\n\n\n\nIn this pairplot:\n\nhue=\"studyName\": This parameter will color the points in the plot according to the ‘studyName’ column, allowing us to easily differentiate data points from different studies.\npalette=\"Set2\": This sets the color palette for differentiating the hue levels.\ndiag_kind=\"kde\": This changes the diagonal plots to Kernel Density Estimation plots, which provide a smoother estimate of the distribution of a variable.\nmarkers=[\"o\", \"s\", \"D\"]: Different markers are used for different hue levels, enhancing the visual distinction between them."
  },
  {
    "objectID": "posts/post-with-code/index.html#step-5-enhancing-the-plot",
    "href": "posts/post-with-code/index.html#step-5-enhancing-the-plot",
    "title": "Hw0",
    "section": "Step 5: Enhancing the Plot",
    "text": "Step 5: Enhancing the Plot\nWe will use matplotlib to enhance the plot, such as setting a title and adjusting layout.\n\n# Enhance the plot\nplt.suptitle(\"Pairplot of Palmer Penguins Dataset\", size=16)\nplt.subplots_adjust(top=0.9)  # Adjust title position\n\n&lt;Figure size 672x480 with 0 Axes&gt;"
  },
  {
    "objectID": "posts/post-with-code/index.html#step-6-displaying-the-plot",
    "href": "posts/post-with-code/index.html#step-6-displaying-the-plot",
    "title": "Hw0",
    "section": "Step 6: Displaying the Plot",
    "text": "Step 6: Displaying the Plot\nFinally, we display the plot.\n\nplt.show()\n\nConclusion\nCongratulations! You have created a comprehensive pairplot of the Palmer Penguins dataset. This plot provides insights into the relationships between various measurements in the dataset and how they vary across different studies. Visualization is a powerful tool in data analysis, and seaborn along with matplotlib makes it convenient and effective."
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "hw1",
    "section": "",
    "text": "url:https://owen020215.github.io/newhw/posts/hw1/\n\n1. Creating a Climate Data Database\nExplanation: Our first step is to construct a database with three critical components: temperatures, stations, and countries. Each table plays a unique role:\n\nTemperatures: Records of temperature readings.\nStations: Geographic and descriptive details of the stations where readings are taken.\nCountries: Information linking stations to their respective countries.\n\nWe use SQL for database management, ensuring efficient data retrieval and organization. This structure allows us to access and analyze climate data effectively.\n\nimport sqlite3\nimport pandas as pd\nconn = sqlite3.connect(\"weather.db\")\nfrom plotly import express as px\nfrom sklearn.linear_model import LinearRegression\n\ndf = pd.read_csv(\"temps.csv\")\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\ndf = prepare_df(df)\ndf.to_sql(\"temperatures\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"country-codes.csv\")\ndf.to_sql(\"countries\", conn, if_exists='replace', index=False)\n\ndf = pd.read_csv(\"station-metadata.csv\")\ndf.to_sql(\"stations\", conn, if_exists='replace', index=False)\n\nconn.close()\n\n\nconn = sqlite3.connect('weather.db')\ncursor = conn.cursor()\n\n# Query to list all tables\ncursor.execute(\"PRAGMA table_info('temperatures');\")\ncolumns = cursor.fetchall()\n\n# Print the column names\nprint(\"Column names in 'temperatures' table:\")\nfor col in columns:\n    print(col[1])  # Column name is in the second position\n\nconn.close()\n\nColumn names in 'temperatures' table:\nID\nYear\nMonth\nTemp\n\n\n\n\n2. Writing a Query Function\nExplanation: To extract meaningful information from our database, we’ll write a function query_climate_database() in Python. This function is designed to retrieve temperature readings for a specified country, within a given date range and month. It returns a Pandas dataframe, making data manipulation and analysis in Python straightforward. Here, we focus on clarity and efficiency, using Python’s f-strings for cleaner SQL queries.\n\nconn = sqlite3.connect(\"weather.db\")\ncursor = conn.cursor() # get a cursor object from the database connection\n\ndef query_climate_database(country, year_begin, year_end, month):\n    cmd = \\\n    f\"\"\"\n    SELECT S.NAME, S.LATITUDE, S.LONGITUDE, C.NAME, T.YEAR, T.MONTH, T.Temp\n    FROM stations S\n    LEFT JOIN temperatures T ON T.id = S.id\n    LEFT JOIN countries C ON SUBSTRING(T.id, 1, 2) = C.'FIPS 10-4'\n    WHERE C.NAME == \"{country}\" AND T.MONTH == {month} AND YEAR BETWEEN {year_begin} AND {year_end}\n    \"\"\"\n\n    df = pd.read_sql_query(cmd, conn)\n    return df\n\nquery_climate_database(country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nName\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns\n\n\n\n\n\nExample and Explanation of query_climate_database():\nCode Explanation: Let’s consider an example where we query temperature data for India from 1980 to 2020 for the month of January. The output will be a neatly organized dataframe showing station names, coordinates, country, year, month, and average temperature.\n\n\n3. Geographic Scatter Function for Yearly Temperature Increases\nExplanation: Our next goal is to visualize how average yearly temperatures change within a country. For this, we create the temperature_coefficient_plot() function. This function generates an interactive scatterplot showing temperature changes at different stations. We’ll use Plotly Express for visualization, enabling us to create dynamic, informative maps. The color intensity of each point on the map indicates the degree of temperature change, providing an immediate visual understanding of climate trends.\n\ndef temperature_coefficient(country, year_begin, year_end, month, min_obs):\n    df = query_climate_database(country, \n                               year_begin, \n                               year_end,\n                               month)\n    value_counts = (df[\"NAME\"].value_counts() &gt;= min_obs) \n    new_value_counts = value_counts[value_counts==True]\n    new_df = df[df['NAME'].isin(new_value_counts.index)].copy()\n    new_df[\"change\"] = new_df[\"NAME\"]\n    \n    for i in new_df['NAME'].unique():\n        df2 =  new_df[new_df[\"NAME\"]==i].copy()\n        X = df2[[\"Year\"]].copy()\n        y = df2['Temp'].copy()\n        model = LinearRegression()\n        model.fit(X, y)\n\n        # Get the first coefficient\n        first_coefficient = model.coef_[0]\n        \n        new_df.loc[new_df[\"NAME\"]==i, \"change\"] = first_coefficient\n        \n    return new_df\n\n# plot the scatter_mapbox\ndef temperature_coefficient_plot(country, year_begin, year_end, month, min_obs, **kwargs):\n    df = temperature_coefficient(country, year_begin, year_end, month, min_obs)\n    \n    df[\"Estimated Yearly Increase\"] = pd.to_numeric(df[\"change\"]).round(4)\n    fig = px.scatter_mapbox(df, \n                            lat = \"LATITUDE\",\n                            lon = \"LONGITUDE\", \n                            hover_name = \"NAME\", \n                            color = \"Estimated Yearly Increase\",\n                            color_continuous_midpoint = 0,\n                            title=f\"Estimate of Yearly Change in Temperature of Stations in {country} in month {month} from {year_begin} to {year_end}\",\n                            **kwargs)\n                            \n    return fig\n\n\nimport plotly.express as px\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(\"India\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()\n\n                                                \n\n\n\n\nExample of Using temperature_coefficient_plot():\nCode Explanation: Imagine creating a plot for India, showing temperature changes in January from 1980 to 2020. The plot not only reveals geographical patterns in temperature changes but also provides detailed information on hover, like station names and precise temperature change values\n\nimport plotly.express as px\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(\"United States\", 1970, 1990, 2, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()\n\n                                                \n\n\nImagine creating a plot for India, showing temperature changes in January from 1980 to 2020.\n\n\n4. Additional Interesting Figures\nExplanation: To further explore our climate data, we’ll create two additional types of interactive visualizations. Each will address a unique question and provide different insights into the dataset.\nWe want to first answer the question: Which station in which year and month had the lowest average temperature?\n\ndef query_climate_database2(limit = 10):\n    cmd = \\\n    f\"\"\"\n    SELECT SUBSTRING(id,1,2) AS country, temp, year, month\n    FROM temperatures\n    ORDER BY temp ASC LIMIT {limit}\n    \"\"\"\n\n    df = pd.read_sql_query(cmd, conn)\n    return df\nquery_climate_database2(10)\n\n\n\n\n\n\n\n\ncountry\nTemp\nYear\nMonth\n\n\n\n\n0\nAY\n-75.00\n1987\n8\n\n\n1\nAY\n-73.80\n1983\n7\n\n\n2\nAY\n-73.55\n1978\n8\n\n\n3\nAY\n-72.89\n1967\n8\n\n\n4\nAY\n-72.83\n2019\n6\n\n\n5\nAY\n-72.80\n1975\n8\n\n\n6\nAY\n-72.80\n1997\n7\n\n\n7\nAY\n-72.35\n1982\n8\n\n\n8\nAY\n-72.19\n1979\n7\n\n\n9\nAY\n-71.87\n1998\n9\n\n\n\n\n\n\n\nThen, we want to visualize our response to the question: Which station in which year and month had the lowest average temperature?\n\nimport plotly.express as px\ndef temperature_coefficient_plot(n = 100, **kwargs):\n    df = query_climate_database2(n)\n\n    fig = px.scatter_3d(df,\n                    x = \"Temp\",\n                    y = \"Year\",\n                    z = \"Month\",\n                    color = \"country\",\n                    opacity = 0.5,\n                    title = f\"Year and Month of the {n} Lowest Temperature\",\n                    **kwargs)\n    \n                            \n    return fig\n\ntemperature_coefficient_plot(150)\n\n                                                \n\n\nWhen compare the highest temperatures between 2 countries, which country has the higher temperature?\n\nimport plotly.express as px\ndef temperature_coefficient_plot(country1, country2, n = 100, **kwargs):\n    cmd = \\\n    f\"\"\"\n    SELECT SUBSTRING(id,1,2) AS country, temp\n    FROM temperatures\n    WHERE country = \"{country1}\"\n    ORDER BY temp DESC LIMIT {n}\n    \"\"\"\n\n    df = pd.read_sql_query(cmd, conn)\n    cmd = \\\n    f\"\"\"\n    SELECT SUBSTRING(id,1,2) AS country, temp\n    FROM temperatures\n    WHERE country = \"{country2}\"\n    ORDER BY temp DESC LIMIT {n}\n    \"\"\"\n\n    df1 = pd.read_sql_query(cmd, conn)\n    df = pd.concat([df,df1])\n    fig = px.box(df, \n             \"Temp\",\n             color = \"country\",\n             width = 600,\n             height = 300,\n             title = f\"Comparing highest {n} temperatures of {country1} versus {country2}\")\n    \n                            \n    return fig\n\ntemperature_coefficient_plot(\"US\",\"CA\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "newhw0",
    "section": "",
    "text": "hw1\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 27, 2024\n\n\nOwen Sun\n\n\n\n\n\n\n\n\n\n\n\n\nHw0\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\nOwen Sun\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 21, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]